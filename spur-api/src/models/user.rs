use chrono::{DateTime, Utc};
use spur_shared::requests::SignupRequest;

/// User with plaintext password.
#[cfg_attr(test, derive(Clone))]
pub struct UserRegistration {
    pub name: String,
    pub email: String,
    pub username: String,
    pub password: String,
}

impl From<SignupRequest> for UserRegistration {
    fn from(value: SignupRequest) -> Self {
        Self {
            name: value.name,
            email: value.email,
            username: value.username,
            password: value.password,
        }
    }
}

impl UserRegistration {
    pub fn into_new_user_with(self, password_hash: String) -> NewUser {
        NewUser { name: self.name, email: self.email, username: self.username, password_hash }
    }
}

/// User with hashed password but without the fields generated by the database.
#[cfg_attr(test, derive(Debug, Clone, PartialEq, Eq))]
pub struct NewUser {
    pub name: String,
    pub email: String,
    pub username: String,
    pub password_hash: String,
}

/// Full user struct as represented in the database.
#[cfg_attr(test, derive(Debug, Clone, PartialEq, Eq))]
pub struct User {
    pub id: i32,
    pub name: String,
    pub email: String,
    pub username: String,
    pub password_hash: String,
    pub created_at: DateTime<Utc>,
}

#[cfg(test)]
impl PartialEq<&NewUser> for User {
    fn eq(&self, other: &&NewUser) -> bool {
        self.name == other.name
            && self.email == other.email
            && self.username == other.username
            && self.password_hash == other.password_hash
    }
}
